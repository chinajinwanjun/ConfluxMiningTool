@page "/counter"
@using Syncfusion.Blazor.Charts
@using Newtonsoft.Json
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs
@using Latest_release_18._2._44.Data
@using Syncfusion.Blazor.Calendars
@inject NavigationManager NavigationManager
@inject PoolHashRateService PoolHashRateService

<div class="control-section">
    <div class="row">
        <div class="col col-3">
            From
            <SfDatePicker TValue="DateTime?" Placeholder='Choose a Date' Value="@From">
                <DatePickerEvents TValue="DateTime?" ValueChange="FromValueChangeHandler"></DatePickerEvents>
            </SfDatePicker>
        </div>
        <div class="col col-3">
            To<SfDatePicker TValue="DateTime?" Placeholder='Choose a Date' Value="@To"  >
                <DatePickerEvents TValue="DateTime?" ValueChange="ToValueChangeHandler"></DatePickerEvents>
            </SfDatePicker>
        </div>
        <div class="col col-3" style="color:red;">
            Tips: 时间范围不要超过3天，超过3天可能无法加载出完整数据
        </div>
    </div>

    <SfChart Title="矿池算力统计图谱">
        <ChartEvents Load="ChartLoad" />
        <ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>
        <ChartPrimaryXAxis LabelFormat="y" ValueType="Syncfusion.Blazor.Charts.ValueType.Category" EdgeLabelPlacement="EdgeLabelPlacement.Shift" LabelRotation="-25">

            <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
        </ChartPrimaryXAxis>
        <ChartPrimaryYAxis LabelFormat="{value}" RangePadding="ChartRangePadding.None">
            <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
        </ChartPrimaryYAxis>
        <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
        <ChartSeriesCollection>
            <ChartSeries DataSource="@ChartData" Name="全网总算力" XName="xValue" Width="2"
                         Opacity="1" YName="yValueAll" Type="ChartSeriesType.Line">
                <ChartMarker Visible="true" Width="10" Height="10">
                </ChartMarker>
            </ChartSeries>
            <ChartSeries DataSource="@ChartData" Name="已知矿池总算力" XName="xValue" Width="2"
                         Opacity="1" YName="yValueSum" Type="ChartSeriesType.Line">
                <ChartMarker Visible="true" Width="10" Height="10">
                </ChartMarker>
            </ChartSeries>
            <ChartSeries DataSource="@ChartData" Name="Poolflare" XName="xValue" Width="2"
                         Opacity="1" YName="yValue1" Type="ChartSeriesType.Line">
                <ChartMarker Visible="true" Width="10" Height="10">
                </ChartMarker>
            </ChartSeries>
            <ChartSeries DataSource="@ChartData" Name="火币矿池" XName="xValue" Width="2"
                         Opacity="1" YName="yValue2" Type="ChartSeriesType.Line">
                <ChartMarker Visible="true" Width="10" Height="10">
                </ChartMarker>
            </ChartSeries>
            <ChartSeries DataSource="@ChartData" Name="蜜蜂矿池" XName="xValue" Width="2"
                         Opacity="1" YName="yValue3" Type="ChartSeriesType.Line">
                <ChartMarker Visible="true" Width="10" Height="10">
                </ChartMarker>
            </ChartSeries>
            <ChartSeries DataSource="@ChartData" Name="鱼池" XName="xValue" Width="2"
                         Opacity="1" YName="yValue4" Type="ChartSeriesType.Line">
                <ChartMarker Visible="true" Width="10" Height="10">
                </ChartMarker>
            </ChartSeries>
            <ChartSeries DataSource="@ChartData" Name="独角兽矿池" XName="xValue" Width="2"
                         Opacity="1" YName="yValue5" Type="ChartSeriesType.Line">
                <ChartMarker Visible="true" Width="10" Height="10">
                </ChartMarker>
            </ChartSeries>
            <ChartSeries DataSource="@ChartData" Name="MatPool" XName="xValue" Width="2"
                         Opacity="1" YName="yValue6" Type="ChartSeriesType.Line">
                <ChartMarker Visible="true" Width="10" Height="10">
                </ChartMarker>
            </ChartSeries>
        </ChartSeriesCollection>
    </SfChart>

</div>
@code{
    private static int constDay = 3;
    public string BarTitle = "";
    private string CurrentUri;
    public DateTime From { get; set; } = DateTime.Now.AddDays(-constDay);
    public DateTime To { get; set; } = DateTime.Now.AddDays(0);
    public class LineChartData
    {
        public string xValue { get; set; }
        public double yValue5 { get; set; }
        public double yValue6 { get; set; }
        public double yValue1 { get; set; }
        public double yValue2 { get; set; }
        public double yValue3 { get; set; }
        public double yValue4 { get; set; }
        public double yValueSum { get; set; }
        public double yValueAll { get; set; }
    }

    public class Statistics
    {
        public string Country;
        public double Users;
        public string Text;
    }
    public List<Statistics> StatisticsDetails = new List<Statistics>
    {

    };
    public void FromValueChangeHandler(Syncfusion.Blazor.Calendars.ChangedEventArgs<DateTime?> args)
    {
        From = args.Value.Value;
        To = args.Value.Value.AddDays(constDay);
        LoadData();
    }
    public void ToValueChangeHandler(Syncfusion.Blazor.Calendars.ChangedEventArgs<DateTime?> args)
    {
        To = args.Value.Value;
        LoadData();
    }
    public void LoadData()
    {
        ChartData = new List<LineChartData> { };
        var poolHashRateList = PoolHashRateService.Get(new DateTime(From.Year, From.Month, From.Day), new DateTime(To.Year, To.Month, To.Day, 23, 59, 59));


        foreach (var poolHashRate in poolHashRateList)
        {
            if (poolHashRate.Values.Count == 7)
            {
                ChartData.Add(
new LineChartData
{
    xValue = poolHashRate.CreatedAt,

    yValue1 = Math.Round((double)poolHashRate.Values[0] / 1000000000, 2),
    yValue2 = Math.Round((double)poolHashRate.Values[1] / 1000000000, 2),
    yValue3 = Math.Round((double)poolHashRate.Values[2] / 1000000000, 2),
    yValue4 = Math.Round((double)poolHashRate.Values[3] / 1000000000, 2),
    yValue5 = Math.Round((double)poolHashRate.Values[4] / 1000000000, 2),
    yValue6 = Math.Round((double)poolHashRate.Values[5] / 1000000000, 2),
    yValueAll = Math.Round((double)poolHashRate.Values[6] / 1000000000, 2),
    yValueSum = Math.Round((double)poolHashRate.Values[0] / 1000000000, 2) +
     Math.Round((double)poolHashRate.Values[1] / 1000000000, 2) +
      Math.Round((double)poolHashRate.Values[2] / 1000000000, 2) +
       Math.Round((double)poolHashRate.Values[3] / 1000000000, 2) +
        Math.Round((double)poolHashRate.Values[4] / 1000000000, 2) +
         Math.Round((double)poolHashRate.Values[5] / 1000000000, 2)
}
  );
            }

        }

    }
    protected override void OnInitialized()
    {

        LoadData();
    }
    public class Data
    {
        public int[] data { get; set; }
    }
    public class MisedData
    {
        public List<Data> datasets { get; set; }
        public string[] labels { get; set; }
    }
    public List<LineChartData> ChartData = new List<LineChartData>
    {
        //    new LineChartData { xValue = new DateTime(2005, 01, 01), yValue = 21, yValue1 = 28 },
    };
    void ChartLoad(ILoadedEventArgs Args)
    {
        CurrentUri = NavigationManager.Uri;
        if (CurrentUri.IndexOf("material") > -1)
        {
            Args.Theme = ChartTheme.Material;
        }
        else if (CurrentUri.IndexOf("fabric") > -1)
        {
            Args.Theme = ChartTheme.Fabric;
        }
        else if (CurrentUri.IndexOf("bootstrap") > -1)
        {
            Args.Theme = ChartTheme.Bootstrap;
        }
        else if (CurrentUri.IndexOf("highcontrast") > -1)
        {
            Args.Theme = ChartTheme.HighContrast;
        }
        else
        {
            Args.Theme = ChartTheme.Bootstrap4;
        }
    }
}